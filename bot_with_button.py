from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)

from environs import Env
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import random


kb_builder = ReplyKeyboardBuilder()
env = Env()
env.read_env()
user = {
    'bot_item': None,
    'user_item': None,
    'win': None
}

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞,
# –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = env('BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
game_button_1 = KeyboardButton(text='–ö–∞–º–µ–Ω—å üåë')
game_button_2 = KeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è')
game_button_3 = KeyboardButton(text='–ë—É–º–∞–≥–∞ üìú')
button_yes = KeyboardButton(text='–î–∞')
button_no = KeyboardButton(text='–ù–µ—Ç')



kb_builder.row(*[game_button_1, game_button_2, game_button_3])

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏

kb_start = ReplyKeyboardMarkup(keyboard=[[button_yes, button_no]], resize_keyboard=True)
keyboard = ReplyKeyboardMarkup(
    keyboard=[[game_button_1, game_button_2]],
    resize_keyboard=True,
    # one_time_keyboard=True
)

def _check_data(user, bot):
    if user == '–ö–∞–º–µ–Ω—å üåë' and bot == '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è':
        return 'user'
    else:
        return 'bot'
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start"
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(CommandStart())
async def process_start_command(message: Message):

    await message.answer(
        text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username}!\n–ñ–µ–ª–∞–µ—à—å –ª–∏ —Ç—ã —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"?',
        reply_markup=kb_start
    )

@dp.message(F.text == '–î–∞')
async def process_yes_game(message: Message):
    user['bot_item'] = random.choice(['–ö–∞–º–µ–Ω—å üåë', '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è', '–ë—É–º–∞–≥–∞ üìú'])
    await  message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ!\n–Ø —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–ª!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤—ã! =)',
        reply_markup=kb_builder.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == '–ù–µ—Ç')
async def process_yes_game(message: Message):
    await  message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ!\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n–ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ! =)',
        reply_markup=ReplyKeyboardRemove()
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–°–æ–±–∞–∫ ü¶Æ" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(F.text == '–ö–∞–º–µ–Ω—å üåë')
async def process_dog_answer(message: Message):
    user['user_item'] = message.text
    if _check_data(user['user_item'], user['bot_item']) == 'user':
        user['win'] = message.from_user.username
    else:
        user['win'] = 'bot'
    await message.answer(
        text=f'–ü–æ–±–µ–¥–∏–ª {user["win"]}!\n–ñ–µ–ª–∞–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
        reply_markup=kb_start
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–û–≥—É—Ä—Ü–æ–≤ ü•í" –∏ —É–¥–∞–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(F.text == '–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è')
async def process_cucumber_answer(message: Message):
    await message.answer(
        text='–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è',
        # reply_markup=ReplyKeyboardRemove()
    )


@dp.message(F.text == '–ë—É–º–∞–≥–∞ üìú')
async def process_cucumber_answer(message: Message):
    await message.answer(
        text='–ë—É–º–∞–≥–∞ üìú',
        # reply_markup=ReplyKeyboardRemove()
    )


if __name__ == '__main__':
    dp.run_polling(bot)